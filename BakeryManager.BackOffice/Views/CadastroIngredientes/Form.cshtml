@model BakeryManager.BackOffice.Models.Cadastros.CadastroIngredientesModel
@using Kendo.Mvc.UI
@using BakeryManager.BackOffice.Models.Cadastros.Ingredientes


@Html.ValidationSummary(true)

@Html.HiddenFor(x => x.IdIngrediente)


<div class="tab-content">

    <div class="tab-pane active" id="dadosgerais">

        <div class="col-lg-8">
            <div class="form-group">
                @Html.LabelFor(x => x.Nome, new { @class = "col-sm-2 control-label" })

                <div class="col-sm-10">
                    @Html.TextBoxFor(x => x.Nome, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.Nome)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Categoria, new { @class = "col-sm-2 control-label" })
                <div class="col-sm-10">

                    @(Html.Kendo().DropDownListFor(x => x.Categoria.IdCategoriaIngrediente).DataTextField("Nome").DataValueField("IdCategoriaIngrediente")
                        .Animation(true)
                        .HtmlAttributes(new { style = "width: 350px"})
                        .Filter(FilterType.StartsWith)
                        .DataSource(dataSource =>
                        {
                            dataSource.Read(read => read.Action("GetCategoriaIngredienteAll", "CadastroIngredientes"));
                        }))
                    @Html.ValidationMessageFor(x => x.Categoria)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.Abreviatura, new { @class = "col-sm-2 control-label" })

                <div class="col-sm-10">
                    @Html.TextBoxFor(x => x.Abreviatura, new { @class = "form-control", style = "width:100px" })
                    @Html.ValidationMessageFor(x => x.Abreviatura)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.CodigoTACO, new { @class = "col-sm-2 control-label" })

                <div class="col-sm-10">
                    @Html.Kendo().NumericTextBoxFor(x => x.CodigoTACO).Decimals(0).Min(1).Placeholder("Insira apenas números").Spinners(false).Format("{0:0}")
                    @Html.ValidationMessageFor(x => x.CodigoTACO)
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.NomeTACO, new { @class = "col-sm-2 control-label" })

                <div class="col-sm-10">
                    @Html.TextBoxFor(x => x.NomeTACO, new { @class = "form-control" })
                    @Html.ValidationMessageFor(x => x.NomeTACO)
                </div>
            </div>
        </div>


    </div>
    <div class="tab-pane" id="tabelanutricional">

        <div class="col-lg-8">

            @(Html.Kendo().Grid<IngredienteTabelaNutricionalModel>()
              .Name("grdTabelaNutricional")
              .Columns(column =>
              {
                  column.Bound(c => c.ComponenteNutricional).ClientTemplate("#=ComponenteNutricional.Nome#");
                  column.Bound(c => c.Valor).EditorTemplateName("Valor").ClientTemplate("#=Valor# #=ComponenteNutricional.UnidadeMedida#");
              })

              .Scrollable()
              .Editable(x => x.Mode(GridEditMode.InCell))
              .DataSource(datasource => datasource
                  .Ajax()
                  .Batch(true)
                  .ServerOperation(false)
                  .Events(events => events.Error("error_handler"))
                  .Model(model =>
                  {
                      model.Id(x => x.IdIngredienteTabelaNutricional);
                      model.Field(x => x.ComponenteNutricional);
                      model.Field(x => x.Valor);

                  })
                  .Read(read => read.Action("GetTabelaNutricional","CadastroIngredientes").Data("getParametroGridTabelaNutricional"))
                  
                )
                                
            )

        </div>




        </div>

</div>

<script type="text/javascript">


    function AtualizaTabelaNutricional(data) {

        if (data.TipoMensagem == 1)
            alert(data.Mensagem, null, data.TipoMensagem)

        else {

            var ds = $("#grdTabelaNutricional").data("kendoGrid").dataSource.view().toJSON();

            $.ajax({

                url: '@Url.Action("UpdateTabelaNutricional")',
                dataType: 'json',
                //contentType: "json",
                method: 'POST',
                data: {
                    strListaComponentes: JSON.stringify(ds),
                    IdIngrediente: $("#IdIngrediente").val()
                },
                success: function (data) {

                    alert(data.Mensagem, function () {
                        if (data.URLDestino != undefined)
                            window.location.href = data.URLDestino;
                    }, data.TipoMensagem);

                }


            });

        }
    }

    function getParametroGridTabelaNutricional() {
        return {
            IdIngrediente: $("#IdIngrediente").val()
        };
    }

</script>
