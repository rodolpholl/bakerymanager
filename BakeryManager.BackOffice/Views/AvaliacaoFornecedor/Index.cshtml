@using BakeryManager.BackOffice.Models.Cadastros.Fornecedores
@using Kendo.Mvc.UI

@{
    ViewBag.Title = "Avaliação de Fornecedores";
}


<div class="container-fluid">

    <!-- Page Heading -->
    <div class="row">
        <div class="col-lg-12">
            <h1 class="page-header">
                @ViewBag.Title
            </h1>
            <ol class="breadcrumb">
                <li>
                    <i class="fa fa-table"></i>  <a href="@Url.Action("Index","Home")">Cadastros</a>
                </li>
                <li>
                    <i class="fa fa-table"></i>  Fornecedores
                </li>
                <li class="active">
                    <i class="fa fa-file"></i> @ViewBag.Title
                </li>
            </ol>
        </div>
    </div>
    <!-- /.row -->
    <div class="row">
        <div class="col-lg-8">
            <form role="form">
                <label class="control-label col-sm-2">Fornecedor</label>
                <div class="form-group">
                    @(Html.Kendo().DropDownList()
                      .Name("cbxFornecedor")
                      .DataTextField("Nome")
                      .DataValueField("IdFornecedor")
                      .OptionLabel("Selecione")
                      .DataSource(ds => ds
                          .Read(read => read.Action("GetListaFornecedor", "AvaliacaoFornecedor"))
                      )
                    )
                </div>
            </form>
        </div>


    </div>
    <div class="row">

        @(Html.Kendo().Grid<FornecedorAvaliacaoModel>()
            .Name("grid")
            .Columns(column =>
            {
                column.Bound(c => c.DataCriacao).Title("Data da Avaliação").Format("dd/MM/yyyy");
                column.Bound(c => c.DataAlteracao).Title("Data da Última Alteração").Format("dd/MM/yyyy");
                column.Bound(c => c.UsuarioAteracao).Title("Usuário resp. Última Alteração");
                column.Bound(c => c.IpAlteracao).Title("Ip da Última Alteraçõa");
                column.Bound(c => c.HabilitaEdicao).ClientTemplate("#if (HabilitaEdicao) {#<a href=\"" + Url.Action("Editar") + "/#=IdFornecedorAvaliacao#\"  class=\"btn btn-default btn-sm\"><span class=\"glyphicon glyphicon-pencil\" aria-hidden=\"true\"></span>&nbsp;Editar</a> #} else {#" +
                                                                   "<i>Edição não disponível</i>#}#");

            })
            .ToolBar(t => t.Template("<a class='k-button k-button-icontext k-grid-add' onclick='novaAvaliacao()' href='#'></span> Nova Avaliação</a>"))
            //.Text("Nova Avaliação").Url(Url.Action("Criar")).HtmlAttributes(new { @class = "k-button k-button-icontext k-grid-add" }))

            .Pageable()
            .Sortable()
            .Filterable(filterable => filterable
            .Extra(false)
            .Operators(operators => operators
                .ForString(str => str.Clear()
                    .StartsWith("Iniciar com")
                    .IsEqualTo("igual a")
                    .IsNotEqualTo("Não igual a")
                ))
            )
            .Selectable()
            .Navigatable()
            .Scrollable(scr => scr.Height(450))
            .DataSource(datasource => datasource

                .Ajax()
                .Batch(false)
                .Model( model =>
                {
                    model.Id(m => m.IdFornecedorAvaliacao);
                    model.Field(m => m.DataAlteracao);
                    model.Field(m => m.DataCriacao);
                    model.Field(m => m.UsuarioAteracao);
                    model.Field(m => m.IpAlteracao);
                    model.Field(m => m.HabilitaEdicao);
                })
                .Read(read => read.Action("read","AvaliacaoFornecedor").Data("GetDataFiltro"))
            )
        )
    </div>

    @*<div class="row">

        
        
        <div class="col-lg-12" id="divQuestionario" style="overflow: scroll; height: 550px">

        </div>

    </div>
    <div class="row">
        <div class="col-lg-12">
            <div class="col-lg-6">
                <hr />
                <button class="btn btn-primary" type="button" id="btnSalvar">Salvar</button>
                Ou
                <button class="btn btn-default" id="btnCancelar" >Cancelar</button>

            </div>
        </div>
    </div>*@

</div>


@section scripts {

<script type="text/javascript">


    function GetDataFiltro() {
        return {
            IdFornecedor: $("#cbxFornecedor").data("kendoDropDownList").value()
        }
    }

    function novaAvaliacao() {
        if ($("#cbxFornecedor").data("kendoDropDownList").value() != "")
            window.location.href = '@Url.Action("Criar")?IdFornecedor=' + $("#cbxFornecedor").data("kendoDropDownList").value();
        else
            alert('Selecione um fornecedor para ser avaliado.');
    }

    $(function(){

        $("#btnCancelar").click(function () {
            $("#cbxFornecedor").change();
        });

        $("#cbxFornecedor").change(function () {


            $("#grid").data("kendoGrid").dataSource.read();

            @*$("#divQuestionario").html("");

            if ($("#cbxFornecedor").data("kendoDropDownList").value() != undefined) {

                $.ajax({

                    url: '@Url.Action("GetQuestionarioFornecedor")',
                    data: {
                        IdFornecedor: $("#cbxFornecedor").data("kendoDropDownList").value()
                    },
                    dataType: "json",
                    method: "POST",
                    success: function(data){

                        $("#divQuestionario").html(data);

                        var rateList = $.find(".rateit");

                        $.each(rateList, function (index,rate) {

                            $(rate).rateit({
                                min: 0,
                                max: 5,
                                step: 0.5,

                            }).bind('rated', avaliacaoChange);

                        });


                        var switchList = $.find(".switchOption");

                        $.each(switchList, function (index, sw) {

                            $(sw).kendoMobileSwitch({
                                onLabel: "SIM",
                                offLabel: "NÃO",
                                change: checkChangeEvent,
                                Name: $(sw).attr("id"),
                                value: $(sw).is(":checked")
                            });


                        });

                    }

                });

            }*@

        });

        $("#btnSalvar").click(function () {

            if ($("#cbxFornecedor").data("kendoDropDownList").value() != undefined) {

                var listaQuestionarioComp = $("#avaliacao").children();
                var listaEnvio = [];

                $.each(listaQuestionarioComp, function (index, listItem) {


                    var listaRespostas = $(listItem).children().find(".lead>table>tbody>tr");
                    var listResposta = [];

                    $.each(listaRespostas, function (index, pergunta) {

                        listResposta.push({
                            IdPergunta: $(pergunta).attr("data-idpergunta"),
                            TipoPergunta: $(pergunta).attr("data-tiporesposta"),
                            OpcaoEletiva: $(pergunta).attr("data-tiporesposta") == "Eletiva" ? ($(pergunta).attr("data-valorselecionado") != undefined ? $(pergunta).attr("data-valorselecionado") == "true" : false) : null,
                            Nota: $(pergunta).attr("data-tiporesposta") == "Avaliacao" ? ($(pergunta).attr("data-valorselecionado") != undefined ?  $(pergunta).attr("data-valorselecionado") : 0) : null
                        });

                    });

                    listaEnvio.push({
                        IdQuestionario: $(listItem).attr("data-IdQuestionario"),
                        Observacoes: $("#Observacoes").data("kendoEditor").value(),
                        Respostas: listResposta
                    });

                });
            }

        });

    });

    function checkChangeEvent(e) {
        $("#"+e.sender.options.Name).parent().parent().parent().attr("data-valorselecionado", e.checked);
    }

    function avaliacaoChange(e,value) {
        $(e.target).parent().parent().attr("data-valorselecionado", value);
    }

</script>
    
}
